import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
//final count counts F2(n) F(6n) and C(n) for n < 5.
public class hom5 extends JApplet
                     implements ActionListener
{
// Extending hom4 so now it also counts the total number of faces that either are different or looks different
//We call these true faces
// reference variables
    JTextField  DInput, F2Outs, F6Outs, FOuts, CnOuts,SnOuts, TrueOuts;
    JLabel      DLabel, F2Label, F6Label, FLabel, CnLabel, SnLabel, TrueLabel;

    JButton clearButton;


    public void init( )
    {    //layout and container
       Container  c  =  getContentPane();
       FlowLayout flo = new FlowLayout();
       c.setLayout(flo);
            //create 2 objects
       DInput   =  new   JTextField( 4 );
       F2Outs   =  new   JTextField( 4 );
       F6Outs    =  new   JTextField( 12 );
        FOuts    =  new   JTextField( 12 );
       CnOuts    =  new   JTextField( 12 );
       SnOuts = new JTextField(4);
       TrueOuts = new JTextField(12);

       clearButton = new JButton("Clear");
           //  make them action listeners
       DInput.addActionListener( this );
       //fInput.addActionListener( this );
       clearButton.addActionListener( this );
            //  create the labels
       DLabel = new JLabel("n:");
       F2Label = new JLabel("F2(n):");
       F6Label = new JLabel("F6(n):");
       FLabel = new JLabel("Initial Faces:");
       CnLabel = new JLabel("C(n) :");
       TrueLabel = new JLabel("Mathematical Faces: ");
       SnLabel = new JLabel("S(n): ");
             //  add the objects to the container
       c.add(DLabel); c.add(DInput);  c.add(CnLabel); c.add(CnOuts);
       c.add(F2Label); c.add(F2Outs);
       c.add(F6Label); c:add(F6Outs);
       c.add(FLabel); c:add(FOuts);
       c.add(SnLabel); c.add(SnOuts);
       c.add(TrueLabel); c.add(TrueOuts);
       c.add(clearButton);
    }

    public void actionPerformed (ActionEvent e)
    {
       String danswer, f2answer, f6answer, fanswer, canswer, sanswer, trueanswer;
       int  symsum=0,nonsum=0,x1,x2,x3,y1,y2,y3, count=0, n, symmetricCount=0;
       if ( e.getSource( ) ==  DInput)//1
      {
         danswer = DInput.getText();
         n = Integer.parseInt(danswer);
         if ((n>0) && (n<5))  //2

         {
         	for (x1 = 1; x1 <=9*n - 8; x1=x1+3)
         	for (x2 = 1; x2 <=9*n - 8 - x1 + 1; x2=x2+3)
         	for (x3 = 1; x3 <=9*n - 8 -(x1+x2) + 2; x3=x3+3)
         	for (y1 = 2; y1 <=9*n - 7 -(x1+x2+x3) + 3; y1=y1+3)
         	for (y2 = 2; y2 <=9*n - 7 - (x1+x2+x3+y1) + 5; y2=y2+3)
         	{
				y3 = 9*n-(x1+x2+x3) - (y1+y2);
				if  (     (! sym(x1,x2,x3)) || ( ! sym(y1,y2,y3) )    ) //3
				{
					nonsum=nonsum+number(x1,y1,x2,y2,x3,y3);
					count=count+1;
				}//if 3
				else
				{
					symmetricCount = symmetricCount + N(x1)*N(y1);
					symsum = symsum + convert(x1, y1);
					count = count +3;//dividing by 3 later
				} //else

			}//for

        f2answer = String.valueOf(symsum);//|F2(n)|
		f6answer = String.valueOf(nonsum/3);   //|F6(n)|
		fanswer = String.valueOf(symsum+nonsum/3);//|F(n)|
		canswer = String.valueOf(count/3); //|C(n)|
		trueanswer = String.valueOf(symmetricCount*3*n+(nonsum/3+symsum-symmetricCount)*9*n);//True Faces
		sanswer = String.valueOf(symmetricCount);//|S(n)|
		SnOuts.setText(sanswer);
		F2Outs.setText( f2answer );
        F6Outs.setText( f6answer);FOuts.setText(fanswer);
        CnOuts.setText( canswer );
        TrueOuts.setText(trueanswer);

       } // if 2
       else
       {
	   			showStatus("n is not correct");
	   			fanswer=" 0< n <5";
	   			F2Outs.setText( fanswer);

	    }//else
	    }//if 1
       else //if
       {
		   //( e.getSource( ) ==  clearButton)
	        //   {
	  			 DInput.setText( "" );
	  			 F2Outs.setText( "" );F6Outs.setText( "" );
	  			 CnOuts.setText(" ");TrueOuts.setText(" ");
	  			 showStatus( "" );
	      }
   }// actionPerformed

      public boolean sym(int x1,int x2,int x3)
     {
       return  (( x1 == x2) && (x2 == x3));
     }

     public int number(int x1, int y1, int x2, int y2, int x3, int y3)
     {
		 int i, prod;
         prod = N(x1)*N(x2)*N(x3)*N(y1)*N(y2)*N(y3);
         return prod;

      }
     public int alpha(int x1, int x2, int x3)
     {
		 if (sym (x1, x2, x3)) return 1;
		 else
		      if ((x1 == x2) || (x1 == x3) || (x2 == x3)) return 3;
		 else return 6;
	 }



     public int N(int x )
     {
        return numberofpats(x);
     }
      public int fah(int c)
	      {
	                 return (int) Math.floor((c+1)/3);
	       }
	      public int numberofpats(int d)
	      {
	 		 int i, sum = 0 ;
	 		 if (d<5) sum = 1 ;
	          else
	          {
	 			 if (even(d))


	              for (i=0;i<=(d-2)/3;i++)
	                 sum = sum + numberofpats(1+3*i)*numberofpats(d-(1+3*i));
	              else
	              for (i=0;i<=(d-4)/3;i++)
	                 sum = sum + numberofpats(2+3*i)*numberofpats(d-(2+3*i));
	 		}
	   	 return sum;

     }
     public int convert(int A, int B )

     {
		 int prod, na, nb, nacubed, nbcubed;
		 na = N(A);
		 nb = N(B);
		 nacubed = (na*na*na-na)/3;
		 nbcubed=(nb*nb*nb-nb)/3;
		 prod = na*nb + na*nbcubed+nacubed*nb+nacubed*nbcubed;
		 return prod;

     }

      public boolean even(int c)  //modulo 3
	      {
	        return ((c/3) == (c-2)/3);
	      }

 }
